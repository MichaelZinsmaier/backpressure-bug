
//	dependencies for the buildscript itself e.g. scoverage
buildscript {

	ext {
		scala = '2.11'
		gradleScoverageVersion = '1.1.0'
		scalastyleVersion = '0.8.2'
	}
	
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath group: 'org.scoverage', name: 'gradle-scoverage', version: gradleScoverageVersion
		classpath group: 'org.github.ngbinh.scalastyle', name: 'gradle-scalastyle-plugin_' + scala, version: scalastyleVersion
	}
}


// tasks and dependencies for the actual project

apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'scalaStyle'
apply plugin: 'scoverage'

ext {
	// Library versions
	scala = '2.11'
	scalaVersion = scala + '.7'
	scoverageVersion = '1.1.1'
	gradleScoverageVersion = '1.1.0'

	akkaVersion = '2.4.10'
	akkaStreamVersion = '2.4.10'

	slf4jVersion = '1.7.13'
	logbackVersion = '1.1.3'
	testNGVersion = '6.9.9'
	scalatestVersion = '2.2.5'
	mockitoVersion = '1.10.19'
	scalastyleVersion = '0.7.2'

	nettyVersion = '4.0.33.Final'

	//General Settings
	skipTests = false
	mainClass = 'ws.backpressuredemo.Main'

}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
	compile group: 'com.typesafe.akka', name: 'akka-actor_' + scala, version: akkaVersion
	compile group: 'com.typesafe.akka', name: 'akka-slf4j_' + scala, version: akkaVersion
	compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
	compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

	compile group: 'com.typesafe.akka', name: 'akka-stream_' + scala, version: akkaStreamVersion
	compile group: 'com.typesafe.akka', name: 'akka-http-core_' + scala, version: akkaStreamVersion
	compile group: 'com.typesafe.akka', name: 'akka-http-experimental_' + scala, version: akkaStreamVersion
	compile group: 'com.typesafe.akka', name: 'akka-http-spray-json-experimental_' + scala, version: akkaStreamVersion

	compile group: 'io.netty', name: 'netty-common', version: nettyVersion
	compile group: 'io.netty', name: 'netty-handler', version: nettyVersion
	compile group: 'io.netty', name: 'netty-codec-http', version: nettyVersion

	testCompile group: 'org.testng', name: 'testng', version: testNGVersion
	testCompile group: 'org.scalatest', name: 'scalatest_' + scala, version: scalatestVersion
	testCompile group: 'com.typesafe.akka', name: 'akka-testkit_' + scala, version: akkaVersion
	testCompile group: 'com.typesafe.akka', name: 'akka-stream-testkit_' + scala, version: akkaStreamVersion
	testCompile group: 'com.typesafe.akka', name: 'akka-http-testkit_' + scala, version: akkaStreamVersion
	testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion

	scoverage 'org.scoverage:scalac-scoverage-plugin_' + scala + ':' + scoverageVersion
	scoverage 'org.scoverage:scalac-scoverage-runtime_' + scala + ':' + scoverageVersion
}

tasks.withType(ScalaCompile) {
	scalaCompileOptions.useAnt = false // Uses a Zinc-based compiler instead of an Ant-based (removes [ant:scalac] compatibility warnings)
	scalaCompileOptions.additionalParameters = ["-feature"] // Displays feature warnings
}

jar {
	manifest.attributes(
		'Implementation-Title': project.name,
		'Implementation-Version': project.version,
		'Main-Class': mainClass,
		'Class-Path': configurations.runtime.files.collect { 'lib/' + it.name }.join(' ')
	)
}

test {
	onlyIf {!skipTests}
	testLogging {
		exceptionFormat "full"
		events "passed", "skipped", "failed"
	}
}

tasks.withType(Test) {
	//makes the standard streams (err and out) visible at console when running tests
	testLogging.showStandardStreams = true

	useTestNG() {
		useDefaultListeners = true
		suites 'src/test/resources/testng-unit.xml'
	}
}

checkScoverage {
	minimumRate = 0.7
}

scalaStyle {
	configLocation = 'src/main/resources/scalastyle.xml'
	includeTestSourceDirectory = false
	source = 'src/main/scala'
	testSource = 'src/test/scala'
	failOnViolation = true
	failOnWarning = false
	verbose = false
	quiet = false
}

// Create zip distribution
task dist(type: Zip) {
	String distFolder = 'build/distributions'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	delete distFolder
	baseName = project.name
	from jar
	from (configurations.runtime) { into 'lib' }
}
